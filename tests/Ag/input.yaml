cutoff: 7.0 # cutoff for neighbour list construction
seed: 42  # random seed

#################################################################
## Metadata section
##
## This is arbitrary key (string)-value (string) pairs that would
## be added to the potential YAML file:
#################################################################
metadata:
  origin: "Automatically generated input"

#################################################################
## Potential definition section
#################################################################
potential:
  deltaSplineBins: 0.001
  elements: [ Ag ]  # list of all elements

  # Embeddings are specified for each individual elements,
  # all parameters could be distinct for different species
  embeddings: # possible keywords: ALL, UNARY, elements: Al, Ni
    ALL: {
      npot: 'FinnisSinclairShiftedScaled',
      fs_parameters: [ 1, 1, 1, 0.5 ],
      ndensity: 2,
    }

  # Bonds are specified for each possible pairs of elements
  # One could use keywords: ALL (Al,Ni, AlNi, NiAl)
  bonds: # possible keywords: ALL, UNARY, BINARY, elements pairs as AlAl, AlNi, NiAl, etc...
    ALL: {
      radbase: SBessel,
      radparameters: [ 5.25 ],
      rcut: 7.0,
      dcut: 0.01,
      NameOfCutoffFunction: cos,
    }

    

  ## possible keywords: ALL, UNARY, BINARY, TERNARY, QUATERNARY, QUINARY,
  ## element combinations as (Al,Al), (Al, Ni), (Al, Ni, Zn), etc...
  functions:
    number_of_functions_per_element: 400
    UNARY:   { nradmax_by_orders: [ 15, 6, 4, 3, 2, 2 ], lmax_by_orders: [ 0 , 3, 3, 2, 2, 1 ]}
    BINARY:  { nradmax_by_orders: [ 15, 6, 3, 2, 2, 1 ], lmax_by_orders: [ 0 , 3, 2, 1, 1, 0 ]}
    TERNARY: { nradmax_by_orders: [ 15, 3, 3, 2, 1 ],    lmax_by_orders: [ 0 , 2, 2, 1, 1 ], }
    ALL:     { nradmax_by_orders: [ 15, 3, 2, 1, 1 ],    lmax_by_orders: [ 0 , 2, 2, 1, 1 ] }


#################################################################
## Dataset specification section
#################################################################
data:
  filename: collected.pckl.gzip       # force to read reference pickled dataframe from given file
  #reference_energy: ["Fe": -8.455262, "C": -9.22405]
  #reference_energy: 0.0
  #test_size: 0.00

  #  aug_factor: 1e-4 # common prefactor for weights of augmented structures
  # reference_energy: auto

#################################################################
## Fit settings section
#################################################################
fit:
  loss: { kappa: 0.95, L1_coeffs: 1e-8,  L2_coeffs: 1e-8}
  # if kappa: auto, then it will be determined from the variation of energy per atom and forces norms in train set

## If `weighting` is not specified - uniform weighting would be used

  ## scipy.minimze algorithm: BFGS /  L-BFGS-B / Nelder-Mead / etc...
  optimizer: BFGS

  ## maximum number of minimize iterations
  maxiter: 500

  ## EXTRA OPTIONS ##
  repulsion: auto    # set inner cutoff based on the minimal distance in the dataset

  #  see Ladder scheme fitting for more info
  ladder_step: 200

  ladder_type: power_order

  # Early stopping
  min_relative_train_loss_per_iter: 5e-5
  min_relative_test_loss_per_iter: 1e-5
  early_stopping_patience: 200

#################################################################
## Backend specification section
#################################################################
backend:
  evaluator: tensorpot
  batch_size: 100
  display_step: 50
